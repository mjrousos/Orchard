using Orchard.ContentManagement;
using Orchard.Security;
using Orchard.UI.Admin;
using Orchard.DisplayManagement;
using Orchard.Localization;
using Orchard.Services;
using System.Web.Mvc;
using Orchard.Mvc.Filters;
ï»¿// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Orchard.Specs
{
    using TechTalk.SpecFlow;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Multiple tenant management")]
    public partial class MultipleTenantManagementFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
#line 1 "MultiTenancy.feature"
#line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Multiple tenant management", "  In order to host several isolated web applications\r\n  As a root Orchard system " +
                    "operator\r\n  I want to create and manage tenant configurations", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
            testRunner.OnFeatureEnd();
            testRunner = null;
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
            testRunner.OnScenarioEnd();
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
            testRunner.OnScenarioStart(scenarioInfo);
        public virtual void ScenarioCleanup()
            testRunner.CollectScenarioErrors();
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Default site is listed")]
        public virtual void DefaultSiteIsListed()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default site is listed", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
    testRunner.Given("I have installed Orchard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
        testRunner.And("I have installed \"Orchard.MultiTenancy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.When("I go to \"Admin/MultiTenancy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
    testRunner.Then("I should see \"List of Site&#39;s Tenants\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
        testRunner.And("I should see \"<h3>\\s*Default\\s*</h3>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
        testRunner.And("the status should be 200 \"OK\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            this.ScenarioCleanup();
        [NUnit.Framework.DescriptionAttribute("New tenant fields are required")]
        public virtual void NewTenantFieldsAreRequired()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New tenant fields are required", ((string[])(null)));
#line 14
#line 15
#line 16
#line 17
    testRunner.When("I go to \"Admin/MultiTenancy/Add\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
        testRunner.And("I hit \"Save\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
    testRunner.Then("I should see \"is required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
        [NUnit.Framework.DescriptionAttribute("A new tenant is created")]
        public virtual void ANewTenantIsCreated()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant is created", ((string[])(null)));
#line 21
#line 22
#line 23
#line 24
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table1.AddRow(new string[] {
                        "Name",
                        "Scott"});
                        "RequestUrlPrefix",
                        "scott"});
#line 25
        testRunner.And("I fill in", ((string)(null)), table1, "And ");
#line 29
#line 30
        testRunner.And("I am redirected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.Then("I should see \"<h3>\\s*Scott\\s*</h3>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
        [NUnit.Framework.DescriptionAttribute("A new tenant is created with uninitialized state")]
        public virtual void ANewTenantIsCreatedWithUninitializedState()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant is created with uninitialized state", ((string[])(null)));
#line 34
#line 35
#line 36
#line 37
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
            table2.AddRow(new string[] {
#line 38
        testRunner.And("I fill in", ((string)(null)), table2, "And ");
#line 42
#line 43
#line 44
    testRunner.Then("I should see \"<li class=\"tenant Uninitialized\">\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
        [NUnit.Framework.DescriptionAttribute("A new tenant goes to the setup screen")]
        public virtual void ANewTenantGoesToTheSetupScreen()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant goes to the setup screen", ((string[])(null)));
#line 47
#line 48
#line 49
#line 50
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
            table3.AddRow(new string[] {
                        "RequestUrlHost",
                        "scott.example.org"});
#line 51
        testRunner.And("I fill in", ((string)(null)), table3, "And ");
#line 55
#line 56
        testRunner.And("I go to \"/Setup\" on host scott.example.org", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
    testRunner.Then("I should see \"Welcome to Orchard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
        testRunner.And("I should see \"Finish Setup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
        [NUnit.Framework.DescriptionAttribute("Several tenants are configured and go to setup screen")]
        public virtual void SeveralTenantsAreConfiguredAndGoToSetupScreen()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Several tenants are configured and go to setup screen", ((string[])(null)));
#line 61
#line 62
#line 63
#line 64
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
            table4.AddRow(new string[] {
                        "Scott1"});
                        "scott1.example.org"});
#line 65
        testRunner.And("I fill in", ((string)(null)), table4, "And ");
#line 69
#line 70
#line 71
        testRunner.And("I go to \"Admin/MultiTenancy/Add\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
            table5.AddRow(new string[] {
                        "Scott2"});
                        "scott2.example.org"});
#line 72
        testRunner.And("I fill in", ((string)(null)), table5, "And ");
#line 76
#line 77
#line 78
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
            table6.AddRow(new string[] {
                        "Scott3"});
                        "scott3.example.org"});
#line 79
        testRunner.And("I fill in", ((string)(null)), table6, "And ");
#line 83
#line 84
#line 85
        testRunner.And("I go to \"/Setup\" on host scott1.example.org", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
        testRunner.And("I go to \"/Setup\" on host scott2.example.org", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
        testRunner.And("I go to \"/Setup\" on host scott3.example.org", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
        [NUnit.Framework.DescriptionAttribute("A new tenant with preconfigured database goes to the setup screen")]
        public virtual void ANewTenantWithPreconfiguredDatabaseGoesToTheSetupScreen()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant with preconfigured database goes to the setup screen", ((string[])(null)));
#line 90
#line 91
#line 92
#line 93
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
            table7.AddRow(new string[] {
                        "DataProvider",
                        "SqlCe"});
#line 94
        testRunner.And("I fill in", ((string)(null)), table7, "And ");
#line 99
#line 100
#line 101
#line 102
#line 103
#line 104
        testRunner.And("I should not see \"SQL Server Compact\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
        [NUnit.Framework.DescriptionAttribute("A new tenant runs the setup")]
        public virtual void ANewTenantRunsTheSetup()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A new tenant runs the setup", ((string[])(null)));
#line 107
#line 108
#line 109
#line 110
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
            table8.AddRow(new string[] {
#line 111
        testRunner.And("I fill in", ((string)(null)), table8, "And ");
#line 115
#line 116
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
            table9.AddRow(new string[] {
                        "SiteName",
                        "Scott Site"});
                        "AdminPassword",
                        "6655321"});
                        "ConfirmPassword",
#line 117
        testRunner.And("I fill in", ((string)(null)), table9, "And ");
#line 122
        testRunner.And("I hit \"Finish Setup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
            testRunner.And("I go to \"/\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
    testRunner.Then("I should see \"Scott Site\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
        testRunner.And("I should see \"Welcome\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        [NUnit.Framework.DescriptionAttribute("An existing initialized tenant cannot have its database option cleared")]
        public virtual void AnExistingInitializedTenantCannotHaveItsDatabaseOptionCleared()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An existing initialized tenant cannot have its database option cleared", ((string[])(null)));
#line 127
#line 128
#line 129
#line 130
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
            table10.AddRow(new string[] {
#line 131
        testRunner.And("I fill in", ((string)(null)), table10, "And ");
#line 135
#line 136
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
            table11.AddRow(new string[] {
#line 137
        testRunner.And("I fill in", ((string)(null)), table11, "And ");
#line 142
#line 143
        testRunner.And("I go to \"/Admin/MultiTenancy/Edit/Scott\" on host localhost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
    testRunner.Then("I should see \"<h1 id=\"page-title\">Edit Tenant</h1>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 145
        testRunner.And("I should see \"<h2>Scott</h2>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
        testRunner.And("I should not see \"Allow the tenant to set up the database\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        [NUnit.Framework.DescriptionAttribute("Default tenant cannot be disabled")]
        public virtual void DefaultTenantCannotBeDisabled()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default tenant cannot be disabled", ((string[])(null)));
#line 148
#line 149
#line 150
#line 151
#line 152
    testRunner.Then("I should not see \"<form action=\"/Admin/MultiTenancy/disable\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
        [NUnit.Framework.DescriptionAttribute("A running tenant can be disabled")]
        public virtual void ARunningTenantCanBeDisabled()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A running tenant can be disabled", ((string[])(null)));
#line 154
#line 155
#line 156
#line 157
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
            table12.AddRow(new string[] {
#line 158
        testRunner.And("I fill in", ((string)(null)), table12, "And ");
#line 162
#line 163
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
            table13.AddRow(new string[] {
#line 164
        testRunner.And("I fill in", ((string)(null)), table13, "And ");
#line 169
#line 170
        testRunner.And("I go to \"/Admin/MultiTenancy\" on host localhost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
        testRunner.And("I hit \"Suspend\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
#line 173
    testRunner.Then("I should see \"<form action=\"/Admin/MultiTenancy/Enable\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
        [NUnit.Framework.DescriptionAttribute("A running tenant which is disabled can be enabled")]
        public virtual void ARunningTenantWhichIsDisabledCanBeEnabled()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A running tenant which is disabled can be enabled", ((string[])(null)));
#line 175
#line 176
#line 177
#line 178
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
            table14.AddRow(new string[] {
#line 179
        testRunner.And("I fill in", ((string)(null)), table14, "And ");
#line 183
#line 184
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
            table15.AddRow(new string[] {
#line 185
        testRunner.And("I fill in", ((string)(null)), table15, "And ");
#line 190
#line 191
#line 192
#line 193
#line 194
        testRunner.And("I hit \"Resume\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
#line 196
    testRunner.Then("I should see \"<form action=\"/Admin/MultiTenancy/Disable\"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
        [NUnit.Framework.DescriptionAttribute("Listing tenants from command line")]
        public virtual void ListingTenantsFromCommandLine()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Listing tenants from command line", ((string[])(null)));
#line 198
#line 199
#line 200
#line 201
        testRunner.And("I have tenant \"Alpha\" on \"example.org\" as \"New-site-name\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
    testRunner.When("I execute >tenant list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 203
    testRunner.Then("I should see \"Name: Alpha\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
        testRunner.And("I should see \"Request URL host: example.org\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
    }
}
#pragma warning restore
#endregion
