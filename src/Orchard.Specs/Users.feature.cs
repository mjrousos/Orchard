using Orchard.ContentManagement;
using Orchard.Security;
using Orchard.UI.Admin;
using Orchard.DisplayManagement;
using Orchard.Localization;
using Orchard.Services;
using System.Web.Mvc;
using Orchard.Mvc.Filters;
ï»¿// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Orchard.Specs
{
    using TechTalk.SpecFlow;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Users")]
    public partial class UsersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
#line 1 "Users.feature"
#line hidden
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Users", "  In order to prevent users module regressions\r\n  As a site owner\r\n  I want to cr" +
                    "eate, search and modify user accounts", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
            testRunner.OnFeatureEnd();
            testRunner = null;
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
            testRunner.OnScenarioEnd();
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
            testRunner.OnScenarioStart(scenarioInfo);
        public virtual void ScenarioCleanup()
            testRunner.CollectScenarioErrors();
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There is only one user by default")]
        [NUnit.Framework.CategoryAttribute("management")]
        public virtual void ThereIsOnlyOneUserByDefault()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("There is only one user by default", new string[] {
                        "management"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
    testRunner.Given("I have installed Orchard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
    testRunner.When("I go to \"admin/users\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
    testRunner.Then("I should see \"Users\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
        testRunner.And("I should see \"<a[^>]*>admin</a>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            this.ScenarioCleanup();
        [NUnit.Framework.DescriptionAttribute("I can create a new user")]
        public virtual void ICanCreateANewUser()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can create a new user", new string[] {
#line 14
#line 15
#line 16
#line 17
#line 18
    testRunner.When("I follow \"Add a new user\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "value"});
            table1.AddRow(new string[] {
                        "UserName",
                        "user1"});
                        "Email",
                        "user1@domain.com"});
                        "Password",
                        "a12345!"});
                        "ConfirmPassword",
#line 19
        testRunner.And("I fill in", ((string)(null)), table1, "And ");
#line 25
        testRunner.And("I hit \"Publish\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
        testRunner.And("I am redirected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
    testRunner.Then("I should see \"User created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
            table2.AddRow(new string[] {
                        "user2"});
                        "user2@domain.com"});
                        "UserRoles.Roles[0].Granted",
                        "true"});
#line 29
        testRunner.And("I fill in", ((string)(null)), table2, "And ");
#line 36
#line 37
#line 38
#line 39
        testRunner.And("I should see \"Adding role Administrator to user user2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
            table3.AddRow(new string[] {
                        "user3"});
                        "user3@domain.com"});
                        "UserRoles.Roles[1].Granted",
                        "UserRoles.Roles[2].Granted",
                        "UserRoles.Roles[3].Granted",
                        "UserRoles.Roles[4].Granted",
#line 41
        testRunner.And("I fill in", ((string)(null)), table3, "And ");
#line 52
#line 53
#line 54
#line 55
        testRunner.And("I should see \"Adding role Administrator to user user3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
        testRunner.And("I should see \"Adding role Editor to user user3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
        testRunner.And("I should see \"Adding role Moderator to user user3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
        testRunner.And("I should see \"Adding role Author to user user3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
        testRunner.And("I should see \"Adding role Contributor to user user3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
#line 61
#line 62
    testRunner.Then("I should see \"The UserName field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
    testRunner.Then("I should see \"The Email field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
    testRunner.Then("I should see \"You must specify a valid email address.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
    testRunner.Then("I should see \"The Password field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
    testRunner.Then("I should see \"The ConfirmPassword field is required.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
    testRunner.Then("I should see \"The password can&#39;t be empty.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
#line 69
        testRunner.And("I follow \"Add a new user\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
            table4.AddRow(new string[] {
                        "user4"});
                        "user4@domain.com"});
                        "a123456!"});
#line 70
        testRunner.And("I fill in", ((string)(null)), table4, "And ");
#line 76
#line 77
    testRunner.Then("I should see \"Password confirmation must match\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
        [NUnit.Framework.DescriptionAttribute("I can edit an existing user")]
        public virtual void ICanEditAnExistingUser()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can edit an existing user", new string[] {
#line 80
#line 81
#line 82
    testRunner.When("I go to \"Admin/ContentTypes/Edit/User\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
            table5.AddRow(new string[] {
                        "ContentTypeSettingsViewModel.Draftable",
#line 83
        testRunner.And("I fill in", ((string)(null)), table5, "And ");
#line 86
        testRunner.And("I hit \"Save\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
#line 88
    testRunner.Then("I should see \"\\\"User\\\" settings have been saved.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
#line 90
#line 91
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
            table6.AddRow(new string[] {
#line 92
        testRunner.And("I fill in", ((string)(null)), table6, "And ");
#line 98
        testRunner.And("I hit \"Save Draft\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
#line 100
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
            table7.AddRow(new string[] {
                        "Options.Search",
#line 101
    testRunner.When("I fill in", ((string)(null)), table7, "When ");
#line 104
        testRunner.And("I hit \"Filter\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
    testRunner.Then("I should see \"<a[^>]*>user1</a>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
    testRunner.When("I follow \"Edit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
            table8.AddRow(new string[] {
#line 107
        testRunner.And("I fill in", ((string)(null)), table8, "And ");
#line 111
#line 112
#line 113
    testRunner.Then("I should see \"User information updated\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
        testRunner.And("I should see \"<a[^>]*>user2</a>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
        testRunner.And("I should see \"user2@domain.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        [NUnit.Framework.DescriptionAttribute("I should not be able to reuse an existing username or email")]
        public virtual void IShouldNotBeAbleToReuseAnExistingUsernameOrEmail()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to reuse an existing username or email", new string[] {
#line 118
#line 119
#line 120
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
            table9.AddRow(new string[] {
#line 121
        testRunner.And("I fill in", ((string)(null)), table9, "And ");
#line 124
#line 125
#line 126
#line 127
#line 129
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
            table10.AddRow(new string[] {
#line 130
        testRunner.And("I fill in", ((string)(null)), table10, "And ");
#line 136
#line 137
#line 139
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
            table11.AddRow(new string[] {
#line 140
        testRunner.And("I fill in", ((string)(null)), table11, "And ");
#line 146
#line 147
#line 148
#line 149
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
            table12.AddRow(new string[] {
#line 151
    testRunner.When("I fill in", ((string)(null)), table12, "When ");
#line 154
#line 155
#line 156
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
            table13.AddRow(new string[] {
#line 157
        testRunner.And("I fill in", ((string)(null)), table13, "And ");
#line 161
#line 162
    testRunner.Then("I should see \"User with that username and/or email already exists.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
            table14.AddRow(new string[] {
#line 163
    testRunner.When("I fill in", ((string)(null)), table14, "When ");
#line 167
#line 168
        [NUnit.Framework.DescriptionAttribute("I should be able to remove an existing user")]
        public virtual void IShouldBeAbleToRemoveAnExistingUser()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be able to remove an existing user", new string[] {
#line 171
#line 172
#line 173
#line 175
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
            table15.AddRow(new string[] {
#line 176
        testRunner.And("I fill in", ((string)(null)), table15, "And ");
#line 182
#line 183
#line 184
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
            table16.AddRow(new string[] {
#line 186
    testRunner.When("I fill in", ((string)(null)), table16, "When ");
#line 189
#line 190
#line 191
        testRunner.When("I hit \"Delete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 192
#line 193
    testRunner.Then("I should see \"User user1 deleted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
        testRunner.And("I should not see \"<a[^>]*>user1</a>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
        [NUnit.Framework.DescriptionAttribute("I should not be able to filter users by name")]
        [NUnit.Framework.CategoryAttribute("filtering")]
        public virtual void IShouldNotBeAbleToFilterUsersByName()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to filter users by name", new string[] {
                        "filtering"});
#line 197
#line 198
#line 199
#line 201
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
            table17.AddRow(new string[] {
#line 202
        testRunner.And("I fill in", ((string)(null)), table17, "And ");
#line 208
#line 209
#line 211
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
            table18.AddRow(new string[] {
#line 212
        testRunner.And("I fill in", ((string)(null)), table18, "And ");
#line 218
#line 219
#line 220
#line 221
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
            table19.AddRow(new string[] {
#line 222
    testRunner.When("I fill in", ((string)(null)), table19, "When ");
#line 225
#line 226
#line 227
        testRunner.And("I should not see \"<a[^>]*>admin</a>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
        testRunner.And("I should not see \"<a[^>]*>user2</a>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
            table20.AddRow(new string[] {
#line 229
    testRunner.When("I fill in", ((string)(null)), table20, "When ");
#line 232
#line 233
#line 234
#line 235
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
            table21.AddRow(new string[] {
                        "@domain.com"});
#line 236
    testRunner.When("I fill in", ((string)(null)), table21, "When ");
#line 239
#line 240
#line 241
#line 242
        [NUnit.Framework.DescriptionAttribute("I should be able to filter users by status")]
        public virtual void IShouldBeAbleToFilterUsersByStatus()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be able to filter users by status", new string[] {
#line 245
#line 246
#line 247
#line 249
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
            table22.AddRow(new string[] {
#line 250
        testRunner.And("I fill in", ((string)(null)), table22, "And ");
#line 256
#line 257
#line 259
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
            table23.AddRow(new string[] {
#line 260
        testRunner.And("I fill in", ((string)(null)), table23, "And ");
#line 266
#line 267
#line 268
#line 269
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
            table24.AddRow(new string[] {
#line 270
    testRunner.When("I fill in", ((string)(null)), table24, "When ");
#line 273
#line 274
#line 275
    testRunner.When("I hit \"Disable\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 276
#line 277
    testRunner.Then("I should see \"User user1 disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
            table25.AddRow(new string[] {
                        ""});
                        "Options.Filter",
                        "Pending"});
#line 278
    testRunner.When("I fill in", ((string)(null)), table25, "When ");
#line 282
#line 283
#line 284
#line 285
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
            table26.AddRow(new string[] {
                        "EmailPending"});
#line 286
    testRunner.When("I fill in", ((string)(null)), table26, "When ");
#line 290
#line 291
    testRunner.Then("I should not see \"<a[^>]*>user1</a>\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 292
#line 293
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
            table27.AddRow(new string[] {
                        "Approved"});
#line 294
    testRunner.When("I fill in", ((string)(null)), table27, "When ");
#line 298
#line 299
#line 300
#line 301
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
            table28.AddRow(new string[] {
                        "All"});
#line 302
    testRunner.When("I fill in", ((string)(null)), table28, "When ");
#line 306
#line 307
#line 308
#line 309
        [NUnit.Framework.DescriptionAttribute("I should not be able to add users with invalid email addresses")]
        [NUnit.Framework.CategoryAttribute("email")]
        public virtual void IShouldNotBeAbleToAddUsersWithInvalidEmailAddresses()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should not be able to add users with invalid email addresses", new string[] {
                        "email"});
#line 311
#line 312
#line 313
#line 314
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
            table29.AddRow(new string[] {
                        "NotAnEmail"});
#line 315
        testRunner.And("I fill in", ((string)(null)), table29, "And ");
#line 321
#line 322
        [NUnit.Framework.DescriptionAttribute("I should be able to add users with valid email addresses")]
        public virtual void IShouldBeAbleToAddUsersWithValidEmailAddresses()
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be able to add users with valid email addresses", new string[] {
#line 324
#line 325
#line 326
#line 327
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
            table30.AddRow(new string[] {
#line 328
        testRunner.And("I fill in", ((string)(null)), table30, "And ");
#line 334
#line 335
#line 336
    }
}
#pragma warning restore
#endregion
